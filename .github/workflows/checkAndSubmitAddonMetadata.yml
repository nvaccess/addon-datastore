name: Check submitted NVDA add-on

on:
  workflow_call:
    inputs:
      issueNumber:
        required: true
        type: string
      issueAuthorId:
        required: true
        type: string
      issueAuthorName:
        required: true
        type: string
      issueTitle:
        required: true
        type: string

jobs:
  getAddonId:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.11 ]
    permissions:
      contents: write
      issues: write
    outputs:
      addonFileName: ${{ steps.getAddonFileName.outputs.result }}
      addonId: ${{ steps.getAddonId.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Determine add-on file name
        uses: actions/github-script@v6
        id: getAddonFileName
        env:
          issueAuthorName: ${{ inputs.issueAuthorName }}
          issueNumber: ${{ inputs.issueNumber }}
        with:
          script: |
            const getAddonFilename = require('./.github/workflows/checkFilesChanged.js')
            const url = "GET /repos/" + process.env.GITHUB_REPOSITORY + "/compare/master..." + process.env.issueAuthorName + process.env.issueNumber
            const result = await github.request(url)
            return getAddonFilename(result.data.files)
      - name: Determine add-on ID
        uses: actions/github-script@v6
        id: getAddonId
        env:
          issueAuthorName: ${{ inputs.issueAuthorName }}
          issueNumber: ${{ inputs.issueNumber }}
        with:
          script: |
            const getAddonFilename = require('./.github/workflows/checkFilesChanged.js')
            const url = "GET /repos/" + process.env.GITHUB_REPOSITORY + "/compare/master..." + process.env.issueAuthorName + process.env.issueNumber
            const result = await github.request(url)
            const addonFileName = getAddonFilename(result.data.files)
            const addonIdRegex = RegExp("addons/(.*)/.*\.json")
            return addonIdRegex.exec(addonFileName)[1]
      - name: Post validation errors as comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ inputs.issueNumber }}
          body-file: ./validationErrors.md
  verifySubmitter:
    # jq for windows has issues parsing multiline strings (e.g. CRLF),
    # use linux instead.
    runs-on: ubuntu-latest
    needs: [getAddonId]
    strategy:
      matrix:
        python-version: [ 3.11 ]
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check if submitter is trusted to submit for this add-on or any add-on ID
        id: checkReg
        run: |
          jqCode="
          . | .[\"${{ inputs.issueAuthorId }}\"]
          | select(
            .trustedSubmitter
            or (
              .addons
              | index(\"${{ needs.getAddonId.outputs.addonId }}\")
            )
          )
          "

          jq -e "$jqCode" submitters.json
          # -e only sets the exit status of jq to 0 if there is "truthy" output.
          # If no valid result is produced, i.e. no submitter is found, jq exits with status 4.
          # If there is a different error, a different non-zero exit code is used.
          exit $? # Exit with the same exit code as jq
      - name: Add add-on ID and submitter to JSON file
        if: failure()
        run: |
          jqCode="
          .[\"${{ inputs.issueAuthorId }}\"].addons += [\"${{ needs.getAddonId.outputs.addonId }}\"]
          | .[\"${{ inputs.issueAuthorId }}\"].githubName = \"${{ inputs.issueAuthorName }}\"
          "

          mv submitters.json submitters.old.json
          jq -e "$jqCode" submitters.old.json > submitters.json
          jqExitCode=$?
          rm submitters.old.json
          exit $jqExitCode
      - name: Create submitter approval PR
        if: failure()
        id: addSubmitterPR
        uses: peter-evans/create-pull-request@v5
        with:
          title: Add ${{ inputs.issueAuthorName }} as an approved submitter for ${{ needs.getAddonId.outputs.addonId }}
          branch: addSubmitter${{ inputs.issueAuthorName }}${{ needs.getAddonId.outputs.addonId }}
          commit-message: Add ${{ inputs.issueAuthorName }} as an approved submitter for ${{ needs.getAddonId.outputs.addonId }}
          body: "Created from #${{ inputs.issueNumber }}"
          author: github-actions <github-actions@github.com>
      - name: Post submitter registration message
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ inputs.issueNumber }}
          body: |
            Welcome to the add-on store submission process.
            As this is your first submission for ${{ needs.getAddonId.outputs.addonId }}, you will need manual approval as a submitter.
            If you are not the owner of the main repository for this add-on, please provide evidence that you have permission to submit this add-on.
            Please wait until #${{ steps.addSubmitterPR.outputs.pull-request-number }} is merged.
  createPullRequest:
    runs-on: windows-latest
    needs: [verifySubmitter]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master
      - name: Update branch
        run: |
          git fetch origin
          git merge origin/${{ inputs.issueAuthorName }}${{ inputs.issueNumber }}
      - name: Create pull request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          title: ${{ inputs.issueTitle }}
          branch: ${{ inputs.issueAuthorName }}${{ inputs.issueNumber }}
          commit-message: ${{ inputs.issueTitle }}
          body: "Closes #${{ inputs.issueNumber }}"
          author: github-actions <github-actions@github.com>
          delete-branch: true
  mergeToMaster:
    needs: [getAddonId, createPullRequest]
    permissions:
      contents: write
      pull-requests: write
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.11 ]
    steps:
      - name: Merge branch to master
        uses: everlytic/branch-merge@1.1.2
        with:
          source_ref: ${{ inputs.issueAuthorName }}${{ inputs.issueNumber }}
          target_branch: master
          commit_message_template: '[Automated] Merged ${{ inputs.addonFileName }} into master'
        
  createReviewComment:
    continue-on-error: true

    # jq for windows has issues parsing multiline strings (e.g. CRLF),
    # use linux instead.
    runs-on: ubuntu-latest
    needs: [getAddonId, mergeToMaster]
    strategy:
      matrix:
        python-version: [ 3.11 ]
    permissions:
      contents: write
      discussions: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get add-on name and version
      id: getAddonNameAndVersion
      uses: actions/github-script@v6
      with:
        script: |
          const setAddonNameAndVersion = require('./.github/workflows/getAddonNameAndVersion.js')
          const addonFilename = ${{ needs.getAddonId.outputs.addonFileName }}
          setAddonNameAndVersion({core}, addonFilename)
    - name: Check if discussion for this add-on exists
      id: checkDiscussion
      run: |
        addonId=$(
          echo ${{ needs.getAddonId.outputs.addonId }}
        )
        jqCode="
        . | .[\"$addonId\"]
        "
        jq -e "$jqCode" discussions.json
        # -e only sets the exit status of jq to 0 if there is "truthy" output.
        # If no valid result is produced, i.e. no add-on id is found, jq exits with status 4.
        # If there is a different error, a different non-zero exit code is used.
        exit $? # Exit with the same exit code as jq
    - name: Get repository and category id
      id: getRepoAndCatId
      if: failure() && steps.checkDiscussion.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          const setRepoCatAndId = require('./.github/workflows/getRepoCatAndId.js')
          setRepoCatAndId({context, github, core})
    - name: Create discussion for add-on id
      id: createDiscussion
      if: failure() && steps.checkDiscussion.outcome == 'failure'
      uses: abirismyname/create-discussion@v1.1.0
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
      with:
        repository-id: "${{ steps.getRepoAndCatId.outputs.repoId }}"
        category-id: "${{ steps.getRepoAndCatId.outputs.catId }}"
        title: Reviews for ${{ steps.getAddonNameAndVersion.outputs.addonName }} add-on (${{ needs.getAddonId.outputs.addonId }})
        body: |
          Community add-on reviews for ${{ steps.getAddonNameAndVersion.outputs.addonName }}.
          Please use threaded replies and avoid email responses.
          Reviews for specific versions of the add-on can be added in response to automated comments for each version.
          Reviews should abide by the [NVDA code of conduct](https://github.com/nvaccess/nvda/blob/master/CODE_OF_CONDUCT.md).
    - name: Add add-on ID and discussion data to json file
      if: failure() && steps.checkDiscussion.outcome == 'failure'
      run: |
        addonId=$(
          echo ${{ needs.getAddonId.outputs.addonId }}
         )
        discussionId=$(
          echo ${{ steps.createDiscussion.outputs.discussion-id }}
        )
        discussionUrl=$(
          echo ${{ steps.createDiscussion.outputs.discussion-url }}
        )
        jqCode="
        .[\"$addonId\"].discussionId = \"$discussionId\"
        | .[\"$addonId\"].discussionUrl = \"$discussionUrl\"
        "
  
        mv discussions.json discussions.old.json
        jq -e "$jqCode" discussions.old.json > discussions.json
        jqExitCode=$?
        rm discussions.old.json
        exit $jqExitCode
    - name: Create review comment
      id: createComment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const createComment = require('./.github/workflows/createComment.js')
          const addonVersion = "${{ steps.getAddonNameAndVersion.outputs.addonVersion }}"
          const addonId = "${{ needs.getAddonId.outputs.addonId }}"
          createComment({context, github, core}, addonVersion, addonId)
    - name: Add discussion URL to metadata
      if: always()
      run: |
        addonFilename=$(
          echo ${{ needs.getAddonId.outputs.addonFileName }}
        )
        reviewUrl=$(
          echo ${{ steps.createComment.outputs.url }}
        )
        jqCode="
        .[\"reviewUrl\"] = \"$reviewUrl\"
        "
  
        mv $addonFilename $addonFilename.old.json
        jq -e "$jqCode" $addonFilename.old.json > $addonFilename
        jqExitCode=$?
        rm $addonFilename.old.json
        exit $jqExitCode
    - name: Commit and push
      if: always()
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "update discussion URL"
        git pull
        git push

  call-workflow:
    needs: [createReviewComment]
    uses: ./.github/workflows/transformDataToViews.yml

