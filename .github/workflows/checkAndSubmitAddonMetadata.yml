name: Check submitted NVDA add-on

on:
  workflow_call:
    inputs:
      issueNumber:
        required: true
        type: string
      issueAuthorId:
        required: true
        type: string
      issueAuthorName:
        required: true
        type: string
      pullRequestNumber:
        required: true
        type: string
      headRef:
        required: true
        type: string

jobs:
  getAddonId:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.11 ]
    permissions:
      contents: write
      pull-requests: write
      issues: write
    outputs:
      addonId: ${{ steps.getAddonId.outputs.result }}
      addonFileName: ${{ steps.getAddonFileName.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.headRef }}
      - name: Create validation errors file
        run: echo "" > validationErrors.md
      - name: Determine add-on file name
        uses: actions/github-script@v6
        id: getAddonFileName
        env:
          pullRequestNumber: ${{ inputs.pullRequestNumber }}
        with:
          script: |
            const getAddonFilename = require('./.github/workflows/checkFilesChanged.js')
            const url = "GET /repos/" + process.env.GITHUB_REPOSITORY + "/pulls/" + process.env.pullRequestNumber + "/files" 
            const result = await github.request(url)
            return getAddonFilename(result.data)
      - name: Determine add-on ID
        uses: actions/github-script@v6
        id: getAddonId
        env:
          pullRequestNumber: ${{ inputs.pullRequestNumber }}
        with:
          script: |
            const getAddonFilename = require('./.github/workflows/checkFilesChanged.js')
            const url = "GET /repos/" + process.env.GITHUB_REPOSITORY + "/pulls/" + process.env.pullRequestNumber + "/files" 
            const result = await github.request(url)
            const addonFileName = getAddonFilename(result.data)
            const addonIdRegex = RegExp("addons/(.*)/.*\.json")
            return addonIdRegex.exec(addonFileName)[1]
      - name: Post validation errors as comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ inputs.issueNumber }}
          body-file: ./validationErrors.md
  verifySubmitter:
    # jq for windows has issues parsing multiline strings (e.g. CRLF),
    # use linux instead.
    runs-on: ubuntu-latest
    needs: [getAddonId]
    strategy:
      matrix:
        python-version: [ 3.11 ]
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check if submitter is trusted to submit for this add-on or any add-on ID
        id: checkReg
        run: |
          jqCode="
          . | .[\"${{ inputs.issueAuthorId }}\"]
          | select(
            .trustedSubmitter
            or (
              .addons
              | index(\"${{ needs.getAddonId.outputs.addonId }}\")
            )
          )
          "

          jq -e "$jqCode" submitters.json
          # -e only sets the exit status of jq to 0 if there is "truthy" output.
          # If no valid result is produced, i.e. no submitter is found, jq exits with status 4.
          # If there is a different error, a different non-zero exit code is used.
          exit $? # Exit with the same exit code as jq
      - name: Add add-on ID and submitter to JSON file
        if: failure()
        run: |
          jqCode="
          .[\"${{ inputs.issueAuthorId }}\"].addons += [\"${{ needs.getAddonId.outputs.addonId }}\"]
          | .[\"${{ inputs.issueAuthorId }}\"].githubName = \"${{ inputs.issueAuthorName }}\"
          "

          mv submitters.json submitters.old.json
          jq -e "$jqCode" submitters.old.json > submitters.json
          jqExitCode=$?
          rm submitters.old.json
          exit $jqExitCode
      - name: Create submitter approval PR
        if: failure()
        id: addSubmitterPR
        uses: peter-evans/create-pull-request@v4
        with:
          title: Add ${{ inputs.issueAuthorName }} as an approved submitter for ${{ needs.getAddonId.outputs.addonId }}
          branch: addSubmitter${{ inputs.issueAuthorName }}${{ needs.getAddonId.outputs.addonId }}
          commit-message: Add ${{ inputs.issueAuthorName }} as an approved submitter for ${{ needs.getAddonId.outputs.addonId }}
          body: "Created from #${{ inputs.issueNumber }}"
          author: github-actions <github-actions@github.com>
      - name: Post submitter registration message
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ inputs.issueNumber }}
          body: |
            Welcome to the add-on store submission process.
            As this is your first submission for ${{ needs.getAddonId.outputs.addonId }}, you will need manual approval as a submitter.
            If you are not the owner of the main repository for this add-on, please provide evidence that you have permission to submit this add-on.
            Please wait until #${{ steps.addSubmitterPR.outputs.pull-request-number }} is merged.
  checkMetadata:
    runs-on: windows-latest
    needs: [getAddonId]
    permissions:
      issues: write
      pull-requests: write
    strategy:
      matrix:
        python-version: [ 3.11 ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.headRef }}
    - name: Create validation errors file
      run: echo "" > validationErrors.md
    - name: Checkout validate repo
      uses: actions/checkout@v3
      with:
        repository: nvaccess/addon-datastore-validation
        path: validation
        submodules: true
    - name: Install addon-datastore-validation dependencies
      run: |
        python -m pip install --upgrade wheel
        pip install -r validation/requirements.txt
    - name: Checkout transformation repo for nvdaAPIVersions.json
      uses: actions/checkout@v3
      with:
        repository: nvaccess/addon-datastore-transform
        path: transform
    - name: Validate metadata
      run: validation/runvalidate ${{ needs.getAddonId.outputs.addonFileName }} ./transform/nvdaAPIVersions.json --output ./validationErrors.md
    - name: Post validation errors as comment
      if: failure()
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ inputs.issueNumber }}
        body-file: ./validationErrors.md
    - name: Close pull request
      if: failure()
      uses: peter-evans/close-pull@v3
      with:
        pull-request-number: ${{ inputs.pullRequestNumber }}
        delete-branch: true
    - name: Close issue
      if: failure()
      uses: peter-evans/close-issue@v3
      with:
        issue-number: ${{ inputs.issueNumber }}
  mergeToMaster:
    needs: [getAddonId, checkMetadata, verifySubmitter]
    permissions:
      contents: write
      pull-requests: write
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.11 ]
    steps:
    - name: Merge branch to master
      uses: everlytic/branch-merge@1.1.2
      with:
        source_ref: ${{ inputs.headRef }}
        target_branch: master
        commit_message_template: '[Automated] Merged ${{ needs.getAddonId.outputs.addonFileName }} (#${{ inputs.pullRequestNumber }}) into master'
  call-workflow:
    needs: mergeToMaster
    uses: ./.github/workflows/transformDataToViews.yml
